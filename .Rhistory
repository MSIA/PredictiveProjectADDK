#separate factors since they won't have squared terms
facs <- sapply(myData2, is.factor)
factorCols <- data.frame(myData2[,facs])
myData3 <- data.frame(myData2[,!facs])
colnames(myData3) <- colnames(myData2)[!facs]
#add squared and interaction terms
myData4 <- data.frame(model.matrix(donated~I(myData3^2) + .^2 ,data=myData3))
#add back response variables
myData4 <- cbind(myData4, donated)
myData4$X.Intercept. <- NULL
myData4 <- cbind(myData4, targdol)
myData4$X.Intercept. <- NULL
myData4 <- cbind(myData4, factorCols)
if (ncol(myData3) > 0) {
colnames(myData4)[1:ncol(myData3)] <- paste('sq_', colnames(myData3),sep='')
}
donTRAINING_orig <- addSecondDegree(donTRAINING_orig)
donTEST_orig <- addSecondDegree(donTEST_orig)
donTRAINING2 <- donTRAINING_orig
donTEST2 <- donTEST_orig
View(donTRAINING2)
length(donTRAINING2$row.names)
sum(donTRAINING2$row.names)
logModel2 <- glm(donated ~ . -targdol, data = donTRAINING2, family=binomial)
sum.mod2 <- summary(logModel2)
num.pred2 <- nrow(sum.mod2$coefficients)
auc(model=logModel2, testdata=donTEST2, testresponse = donTEST2$donated) # 0.7290656...0.7939676
ccr(model=logModel2, testdata=donTEST2, testresponse = donTEST2$donated) # 0.7604186...0.7392989
sum.mod2
for name in colnames(myData4)[1:ncol(myData3)]{
print(name)
}
colnames(myData4)[1:ncol(myData3)]
for (name in colnames(myData4)[1:ncol(myData3)]){
print(name)
}
#remove squared terms with only two unique values (0 and 1)
for (name in colnames(myData4)[1:ncol(myData3)]){
if (length(unique(myData4[,name])) <= 2){
print(name)
}
}
#remove squared terms with only two unique values (0 and 1)
for (name in colnames(myData4)[1:ncol(myData3)]){
if (length(unique(myData4[,name])) <= 2){
myData4[,name] <- NULL
}
}
#install.packages('ROCR')
library(ROCR)
library(pROC)
who = "dustin"
# Set appropriate file address
if(who=="kristin"){
address <- '/Users/kmeier92/Documents/Northwestern/fall2016/Predictive_Analytics/PredictiveProjectADDK/'
}
if(who=="adit"){
address <- ''
}
if(who=="dylan"){
address <- 'C:/Users/Dylan/Documents/Northwestern/Predictive Analytics I/PROJECT/'
}
if(who=="dustin"){
address <- 'C:/Users/Dustin/Documents/Northwestern/Predictive Analytics 1/PredictiveProjectADDK/'
}
# source R code that cleans the data as needed
setwd(address)
source(paste(address,'R/cleandata.R',sep=""))
# functions auc & ccr
source(paste(address,'R/helper.R',sep=""))
# call function to create the 2 datasets
thedata <- cleandata(dropNA=F)
donTRAINING_orig <- thedata$train
donTEST_orig <- thedata$test
donTRAINING_orig <- addSecondDegree(donTRAINING_orig)
donTEST_orig <- addSecondDegree(donTEST_orig)
donTRAINING2 <- donTRAINING_orig
donTEST2 <- donTEST_orig
logModel2 <- glm(donated ~ . -targdol, data = donTRAINING2, family=binomial)
sum.mod2 <- summary(logModel2)
num.pred2 <- nrow(sum.mod2$coefficients)
auc(model=logModel2, testdata=donTEST2, testresponse = donTEST2$donated) # 0.7290656...0.7939676
ccr(model=logModel2, testdata=donTEST2, testresponse = donTEST2$donated) # 0.7604186...0.7392989
colnames(donTRAINING2)
auc(model=logModel2, testdata=donTEST2, testresponse = donTEST2$donated) # 0.7290656...0.7939676
ccr(model=logModel2, testdata=donTEST2, testresponse = donTEST2$donated) # 0.7604186...0.7392989
# what to do regression on
keepcols.lm <- c("TARGDOL", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST",  "CNDOL2", "
CNDOL3", "CNTMLIF", "SEX", "CNMON1", "CNMONF", "CNMONL", "ContType1",
"SolType1", "avg", "avgTime", "don2", "don3","incr_don","Region")
## you can either have: DATES OF CONTRIBUTION or MONTHS SINCE LATEST CONTRIBUTION
## since all data is using 1 date as current date. these are redundant
donTRAINING.lm <- donTRAINING_orig[,(names(donTRAINING_orig) %in% keepcols.lm)]
donTEST.lm <- donTEST_orig[,(names(donTEST_orig) %in% keepcols.lm)]
donTRAINING.lm <- donTRAINING.lm[donTRAINING.lm$TARGDOL > 0,]
donTEST.lm <- donTEST.lm[donTEST.lm$TARGDOL > 0,]
lmModel <- lm(TARGDOL ~ . , data = donTRAINING.lm)
sum.mod.lm <- summary(lmModel)
num.pred.lm <- nrow(sum.mod.lm$coefficients)
r2.lm <- sum.mod.lm$r.squared # 0.8389792
keepcols.lm <- c("targdol", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST",  "CNDOL2", "
CNDOL3", "CNTMLIF", "SEX", "CNMON1", "CNMONF", "CNMONL", "ContType1",
"SolType1", "avg", "avgTime", "don2", "don3","incr_don","Region")
## you can either have: DATES OF CONTRIBUTION or MONTHS SINCE LATEST CONTRIBUTION
## since all data is using 1 date as current date. these are redundant
donTRAINING.lm <- donTRAINING_orig[,(names(donTRAINING_orig) %in% keepcols.lm)]
donTEST.lm <- donTEST_orig[,(names(donTEST_orig) %in% keepcols.lm)]
donTRAINING.lm <- donTRAINING.lm[donTRAINING.lm$TARGDOL > 0,]
donTEST.lm <- donTEST.lm[donTEST.lm$TARGDOL > 0,]
lmModel <- lm(targdol ~ . , data = donTRAINING.lm)
sum.mod.lm <- summary(lmModel)
num.pred.lm <- nrow(sum.mod.lm$coefficients)
r2.lm <- sum.mod.lm$r.squared # 0.8389792
keepcols.lm <- c("targdol", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST",  "CNDOL2", "
CNDOL3", "CNTMLIF", "SEX", "CNMON1", "CNMONF", "CNMONL", "ContType1",
"SolType1", "avg", "avgTime", "don2", "don3","incr_don","Region")
## you can either have: DATES OF CONTRIBUTION or MONTHS SINCE LATEST CONTRIBUTION
## since all data is using 1 date as current date. these are redundant
donTRAINING.lm <- donTRAINING_orig[,(names(donTRAINING_orig) %in% keepcols.lm)]
donTEST.lm <- donTEST_orig[,(names(donTEST_orig) %in% keepcols.lm)]
donTRAINING.lm <- donTRAINING.lm[donTRAINING.lm$targdol > 0,]
donTEST.lm <- donTEST.lm[donTEST.lm$targdol > 0,]
lmModel <- lm(targdol ~ . , data = donTRAINING.lm)
sum.mod.lm <- summary(lmModel)
num.pred.lm <- nrow(sum.mod.lm$coefficients)
r2.lm <- sum.mod.lm$r.squared # 0.8389792
r2.lm
keepcols.quad <- c("targdol", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST", "CNDOL2","CNDOL3",
"CNTMLIF",  "SEX", "CNMON1", "CNMONF", "CNMONL", "ContType1",
"SolType1", "avg", "avgTime", "don2", "don3", "incr_don", "Region", "sq_CNDOL1",
"sq_CNTRLIF", "sq_CONLARG", "sq_CONTRFST",
"sq_CNDOL2", "sq_CNDOL3", "sq_CNTMLIF",
"sq_CNMON1",
"sq_CNMONF", "sq_CNMONL", "sq_avg", "sq_avgTime")
donTRAINING.lm.quad <- donTRAINING_orig[,(names(donTRAINING_orig) %in% keepcols.quad)]
donTEST.lm.quad <- donTEST_orig[,(names(donTEST_orig) %in% keepcols.quad)]
donTRAINING.lm.quad <- donTRAINING.lm.quad[donTRAINING.lm.quad$targdol > 0,]
donTEST.lm.quad <- donTEST.lm.quad[donTEST.lm.quad$targdol > 0,]
lmModel.quad <- lm(TARGDOL ~ . , data = donTRAINING.lm.quad)
sum.mod.lm.quad <- summary(lmModel.quad)
num.pred.lm.quad <- nrow(sum.mod.lm.quad$coefficients)
r2.lm.quad <- sum.mod.lm.quad$r.squared # 0.8804493
keepcols.quad <- c("targdol", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST", "CNDOL2","CNDOL3",
"CNTMLIF",  "SEX", "CNMON1", "CNMONF", "CNMONL", "ContType1",
"SolType1", "avg", "avgTime", "don2", "don3", "incr_don", "Region", "sq_CNDOL1",
"sq_CNTRLIF", "sq_CONLARG", "sq_CONTRFST",
"sq_CNDOL2", "sq_CNDOL3", "sq_CNTMLIF",
"sq_CNMON1",
"sq_CNMONF", "sq_CNMONL", "sq_avg", "sq_avgTime")
donTRAINING.lm.quad <- donTRAINING_orig[,(names(donTRAINING_orig) %in% keepcols.quad)]
donTEST.lm.quad <- donTEST_orig[,(names(donTEST_orig) %in% keepcols.quad)]
donTRAINING.lm.quad <- donTRAINING.lm.quad[donTRAINING.lm.quad$targdol > 0,]
donTEST.lm.quad <- donTEST.lm.quad[donTEST.lm.quad$targdol > 0,]
lmModel.quad <- lm(targdol ~ . , data = donTRAINING.lm.quad)
sum.mod.lm.quad <- summary(lmModel.quad)
num.pred.lm.quad <- nrow(sum.mod.lm.quad$coefficients)
r2.lm.quad <- sum.mod.lm.quad$r.squared # 0.8804493
r2.lm.quad
donTRAINING.inter <- donTRAINING_orig
donTEST.inter <- donTEST_ori
donTRAINING.inter <- donTRAINING_orig
donTEST.inter <- donTEST_orig
donTRAINING.inter <- donTRAINING.inter[donTRAINING.inter$targdol > 0,]
donTEST.inter <- donTEST.inter[donTEST.inter$targdol > 0,]
donTRAINING.lm.inter <- donTRAINING_orig
donTEST.lm.inter <- donTEST_orig
donTRAINING.lm.inter <- donTRAINING.lm.inter[donTRAINING.lm.inter$targdol > 0,]
donTEST.lm.inter <- donTEST.lm.inter[donTEST.lm.inter$targdol > 0,]
lmModel.inter <- lm(targdol ~ . , data = donTRAINING.lm.inter)
sum.mod.lm.inter <- summary(lmModel.inter)
num.pred.lm.inter <- nrow(sum.mod.lm.inter$coefficients)
r2.lm.inter <- sum.mod.lm.inter$r.squared # 0.8804493
r2.lm.inter
#install.packages('ROCR')
library(ROCR)
library(pROC)
who = "dustin"
# Set appropriate file address
if(who=="kristin"){
address <- '/Users/kmeier92/Documents/Northwestern/fall2016/Predictive_Analytics/PredictiveProjectADDK/'
}
if(who=="adit"){
address <- ''
}
if(who=="dylan"){
address <- 'C:/Users/Dylan/Documents/Northwestern/Predictive Analytics I/PROJECT/'
}
if(who=="dustin"){
address <- 'C:/Users/Dustin/Documents/Northwestern/Predictive Analytics 1/PredictiveProjectADDK/'
}
# source R code that cleans the data as needed
setwd(address)
source(paste(address,'R/cleandata.R',sep=""))
# functions auc & ccr
source(paste(address,'R/helper.R',sep=""))
# call function to create the 2 datasets
thedata <- cleandata(dropNA=F)
donTRAINING_orig <- thedata$train
donTEST_orig <- thedata$test
donTRAINING_orig <- addSecondDegree(donTRAINING_orig)
donTEST_orig <- addSecondDegree(donTEST_orig)
#####################################################
#####################################################
######################################################
# LOGISTIC REGRESSION MODEL
######################################################
#####################################################
#####################################################
# fit basic logistic regression model
# https://www.r-bloggers.com/evaluating-logistic-regression-models/
# Split into TRAINING and TEST sets
# Remove some columns
# "CNDOL1"    "CNTRLIF"   "CONLARG"   "CONTRFST"
#         "CNDOL2"    "CNDOL3"    "CNTMLIF"
# "TARGDOL"     "SEX"       "CNMON1"    "CNMON2"    "CNMON3"    "CNMONF"    "CNMONL"
# "ID"        "ContType1" "ContType2" "ContType3" "SolType1"  "SolType2"  "SolType3"  "Region"
# "avg"       "avgTime"   "don2"      "don3"      "donated" "incr_don"
# QUAD TERMS
# "sq_CNDOL1"   "sq_CNTRLIF"  "sq_CONLARG"  "sq_CONTRFST"
#       "sq_CNDOL2"   "sq_CNDOL3"   "sq_CNTMLIF"
# "sq_CNMON1"   "sq_CNMON2"   "sq_CNMON3"   "sq_CNMONF"   "sq_CNMONL"   "sq_avg"      "sq_avgTime"  "sq_don2"
# "sq_don3"
# what to do regression on
keepcols <- c("donated", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST",
"CNDOL2", "CNDOL3", "CNTMLIF", "SEX", "CNMON1",
"CNMONF", "CNMONL", "ContType1", "SolType1",
"avg", "avgTime", "don2", "don3","incr_don", "Region")
## you can either have: DATES OF CONTRIBUTION or MONTHS SINCE LATEST CONTRIBUTION
## since all data is using 1 date as current date. these are redundant
donTRAINING <- donTRAINING_orig[,(names(donTRAINING_orig) %in% keepcols)]
donTEST <- donTEST_orig[,(names(donTEST_orig) %in% keepcols)]
### WHAT THE AUC IS
### CORRECT RATE
### # SIG PREDICTORS
### # TOTAL PREDICTORS
### ASSUME WE ARE USING THIS AS A MEASURE OF 'BEST MODEL'
logModel <- glm(donated ~ . , data = donTRAINING, family=binomial)
sum.mod <- summary(logModel)
num.pred <- nrow(sum.mod$coefficients)
auc(model=logModel) # 0.716036
ccr(model=logModel) # 0.7530394
##########################
# BACKWARDS STEPWISE
##########################
logModel <- glm(donated ~ . , data = donTRAINING, family=binomial)
backwards = step(logModel)
summary(backwards)
auc(model=backwards) # 0.716004
ccr(model=backwards) # 0.7531906
# final no NA
'donated ~ CNDOL1 + CNTRLIF + CONLARG + CONTRFST +
CNDOL2 + CNTMLIF  + SEX + CNMON2 + CNMONF +
CNMONL + ContType1 + SolType2 + avg + incr_don'
# final w/ NA
'
donated ~ CNDOL1 + CNTRLIF + CONLARG + CONTRFST +
CNDOL2 + CNTMLIF  + SEX + CNMON2 + CNMONF +
CNMONL + ContType1 + SolType2 + avg + avgTime + don3 + incr_don
'
##########################
# FORWARD STEPWISE
##########################
nothing <- glm(donated ~ 1, data = donTRAINING, family=binomial)
forwards = step(nothing,
scope=list(lower=formula(nothing),upper=formula(logModel)),
direction="forward")
summary(forwards)
# final same as w/o NA
'
donated ~ CNMON2 + CNMONL  + avgTime +
ContType1 + CONTRFST + incr_don + SolType2 + CNTMLIF + CNMONF +
CNDOL2 + CONLARG + CNDOL1 + CNTRLIF  + avg + SEX
'
auc(model=forwards) # 0.716004
ccr(model=forwards) # 0.7531906
######################################################
# QUADRATIC TERMS ADDED
# http://stats.stackexchange.com/questions/28730/does-it-make-sense-to-add-a-quadratic-term-but-not-the-linear-term-to-a-model
######################################################
# USE OUTPUT FROM STEPWISE REGRESSION + SQUARE TERMS.
"donated", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST",
"CNDOL2", "CNDOL3", "CNTMLIF", "SEX", "CNMON1",
"CNMONF", "CNMONL", "ContType1", "SolType1",
"avg", "avgTime", "don2", "don3","incr_don"
keepcols.quad <- c("donated", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST",  "CNDOL2", "CNDOL3",
"CNTMLIF", "SEX", "CNMON1","CNMONF", "CNMONL", "ContType1",
"SolType1",  "avg", "avgTime", "don2", "don3", "incr_don", "Region", "sq_CNDOL1",
"sq_CNTRLIF", "sq_CONLARG", "sq_CONTRFST",
"sq_CNDOL2", "sq_CNDOL3", "sq_CNTMLIF", "sq_CNMON1",
"sq_CNMONF", "sq_CNMONL", "sq_avg", "sq_avgTime")
donTRAINING.quad <- donTRAINING_orig[,(names(donTRAINING_orig) %in% keepcols.quad)]
donTEST.quad <- donTEST_orig[,(names(donTEST_orig) %in% keepcols.quad)]
logModel.quad <- glm(donated ~ . , data = donTRAINING.quad, family=binomial)
sum.mod.quad <- summary(logModel.quad)
num.pred.quad <- nrow(sum.mod.quad$coefficients)
auc(model=logModel.quad, testdata = donTEST.quad) # 0.7194766
ccr(model=logModel.quad, testdata = donTEST.quad) # 0.7550656
###################################
# BACKWARDS STEPWISE - W/ QUADRATIC
###################################
logModel.quad <- glm(donated ~ . , data = donTRAINING.quad, family=binomial)
backwards.quad = backwards
backwards.quad = step(logModel.quad)
summary(backwards.quad)
'final
donated ~ CNDOL1 + CONLARG + CONTRFST + CNDOL2 +
CNTMLIF + SEX + CNMON2 + CNMON3 + CNMONF + CNMONL + ContType1 +
SolType3 + avg + sq_CNDOL1 + sq_CNTRLIF     + sq_CNDOL2 +
sq_CNTMLIF  + sq_CNMONF + sq_CNMONL + sq_avg
'
' final w/ NA
donated ~ CNDOL1 + CONLARG + CONTRFST + CNDOL2 +
CNTMLIF + SEX + CNMON2 + CNMON3 + CNMONF + CNMONL + ContType1 +
SolType3 + avg + incr_don + sq_CNDOL1 + sq_CNTRLIF + sq_CONLARG +
sq_CNDOL2 + sq_CNTMLIF  + sq_CNMONF +
sq_CNMONL + sq_avg
'
auc(model=backwards.quad, testdata = donTEST.quad) # 0.7194993
ccr(model=backwards.quad, testdata = donTEST.quad) # 0.7550051
###################################
# ALL SECOND DEGREE TERMS ADDED
###################################
donTRAINING2 <- donTRAINING_orig
donTEST2 <- donTEST_orig
logModel2 <- glm(donated ~ . -targdol, data = donTRAINING2, family=binomial)
sum.mod2 <- summary(logModel2)
num.pred2 <- nrow(sum.mod2$coefficients)
auc(model=logModel2, testdata=donTEST2, testresponse = donTEST2$donated) # 0.7939676
ccr(model=logModel2, testdata=donTEST2, testresponse = donTEST2$donated) # 0.7392989
#####################################################
#####################################################
######################################################
# MULTIPLE LINEAR REGRESSION W/ DONATION > 0
# http://stats.stackexchange.com/questions/28730/does-it-make-sense-to-add-a-quadratic-term-but-not-the-linear-term-to-a-model
######################################################
#####################################################
#####################################################
# now only want where TARGDOL > 0
# "CNDOL1"    "CNTRLIF"   "CONLARG"   "CONTRFST"
#     "CNDOL2"    "CNDOL3"    "CNTMLIF"
# "TARGDOL"     "SEX"       "CNMON1"    "CNMON2"    "CNMON3"    "CNMONF"    "CNMONL"
# "ID"        "ContType1" "ContType2" "ContType3" "SolType1"  "SolType2"  "SolType3"  "Region"
# "avg"       "avgTime"   "don2"      "don3"      "donated" "incr_don"
# what to do regression on
keepcols.lm <- c("targdol", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST",  "CNDOL2", "
CNDOL3", "CNTMLIF", "SEX", "CNMON1", "CNMONF", "CNMONL", "ContType1",
"SolType1", "avg", "avgTime", "don2", "don3","incr_don","Region")
## you can either have: DATES OF CONTRIBUTION or MONTHS SINCE LATEST CONTRIBUTION
## since all data is using 1 date as current date. these are redundant
donTRAINING.lm <- donTRAINING_orig[,(names(donTRAINING_orig) %in% keepcols.lm)]
donTEST.lm <- donTEST_orig[,(names(donTEST_orig) %in% keepcols.lm)]
donTRAINING.lm <- donTRAINING.lm[donTRAINING.lm$targdol > 0,]
donTEST.lm <- donTEST.lm[donTEST.lm$targdol > 0,]
lmModel <- lm(targdol ~ . , data = donTRAINING.lm)
sum.mod.lm <- summary(lmModel)
num.pred.lm <- nrow(sum.mod.lm$coefficients)
r2.lm <- sum.mod.lm$r.squared # 0.8389792
##########################
# BACKWARDS STEPWISE - LM
##########################
backwards.lm = step(lmModel)
sum.back.lm = summary(backwards.lm)
r2.lm.back <- sum.back.lm$r.squared # 0.838841
'final
TARGDOL ~ CNDOL1 + CNTRLIF + CONLARG + CONTRFST +
CNDOL2 + CNTMLIF  + CNMON2 + CNMONF + CNMONL + ContType1 +
SolType1 + SolType2 + avg + incr_don
'
' final w/ NA
TARGDOL ~ CNDOL1 + CNTRLIF + CONLARG + CONTRFST +
CNDOL2 + CNTMLIF   + CNMON2 + CNMONF + CNMONL +
ContType1 + SolType1 + SolType2 + avg + avgTime + don3 +
incr_don'
##########################
# ADD QUADRATIC - LM W/ QUADRATIC
##########################
keepcols.quad <- c("targdol", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST", "CNDOL2","CNDOL3",
"CNTMLIF",  "SEX", "CNMON1", "CNMONF", "CNMONL", "ContType1",
"SolType1", "avg", "avgTime", "don2", "don3", "incr_don", "Region", "sq_CNDOL1",
"sq_CNTRLIF", "sq_CONLARG", "sq_CONTRFST",
"sq_CNDOL2", "sq_CNDOL3", "sq_CNTMLIF",
"sq_CNMON1",
"sq_CNMONF", "sq_CNMONL", "sq_avg", "sq_avgTime")
donTRAINING.lm.quad <- donTRAINING_orig[,(names(donTRAINING_orig) %in% keepcols.quad)]
donTEST.lm.quad <- donTEST_orig[,(names(donTEST_orig) %in% keepcols.quad)]
donTRAINING.lm.quad <- donTRAINING.lm.quad[donTRAINING.lm.quad$targdol > 0,]
donTEST.lm.quad <- donTEST.lm.quad[donTEST.lm.quad$targdol > 0,]
lmModel.quad <- lm(targdol ~ . , data = donTRAINING.lm.quad)
sum.mod.lm.quad <- summary(lmModel.quad)
num.pred.lm.quad <- nrow(sum.mod.lm.quad$coefficients)
r2.lm.quad <- sum.mod.lm.quad$r.squared # 0.8804493
##########################
# BACKWARDS STEPWISE LM W/ QUADRATIC
##########################
backwards.lm.quad = step(lmModel.quad)
sum.back.lm.quad = summary(backwards.lm.quad)
r2.lm.back.quad <- sum.back.lm.quad$r.squared # 0.8803298
'final same as w/o NA
TARGDOL ~ CNDOL1 + CNTRLIF + CONLARG  +
CNDOL2 + CNMON2 + CNMON3 + CNMONL + ContType1 + SolType1 +
SolType3 + avg + incr_don + sq_CNDOL1 + sq_CONTRFST +
sq_CNDOL2 + sq_CNDOL3 +
sq_CNMONL + sq_avg
'
###################################
# ALL SECOND DEGREE TERMS ADDED
###################################
donTRAINING.lm.inter <- donTRAINING_orig
donTEST.lm.inter <- donTEST_orig
donTRAINING.lm.inter <- donTRAINING.lm.inter[donTRAINING.lm.inter$targdol > 0,]
donTEST.lm.inter <- donTEST.lm.inter[donTEST.lm.inter$targdol > 0,]
lmModel.inter <- lm(targdol ~ . , data = donTRAINING.lm.inter)
sum.mod.lm.inter <- summary(lmModel.inter)
num.pred.lm.inter <- nrow(sum.mod.lm.inter$coefficients)
r2.lm.inter <- sum.mod.lm.inter$r.squared # 0.9517647
#####################################################
#####################################################
######################################################
# EXPECTED DONATIONS
######################################################
#####################################################
#####################################################
logmodelnames = c("logModel", "logModel.quad","backwards","backwards.quad", "logModel2")
logmodels = list(logModel, logModel.quad, backwards, backwards.quad, logModel2)
lmmodelnames = c("lmModel", "lmModel.quad", "backwards.lm.quad", "backwards.lm", "lmModel.inter")
lmmodels = list(lmModel, lmModel.quad, backwards.lm.quad, backwards.lm, lmModel.inter)
don.output <- data.frame("","",0,stringsAsFactors=FALSE)
colnames(don.output) <- c("logmodel","lmmodel","exp.don")
for(i in 1:length(logmodelnames)){
for(j in 1:length(lmmodelnames)){
newcol <- c(logmodelnames[i],
lmmodelnames[j],
expected.don(final.log.model = logmodels[[i]],
final.lm.model = lmmodels[[j]]))
don.output <- rbind(don.output,newcol)
}
}
don.output <- don.output[2:nrow(don.output),]
don.output$exp.don <- as.numeric(don.output$exp.don)
# ORDER GREATEST TO LEAST
don.output[order(-don.output$exp.don),]
expected.don <- function(final.log.model = logModel,
final.lm.model = lmModel,
final.data = donTEST_orig){
#get probability that each person donates from logistic model
final.data$prob <- predict.glm(final.log.model, newdata=final.data, type="response")
#get guess of each person's donation from multiple regression model
final.data$donGuess <- predict.lm(final.lm.model, newdata=final.data, na.action = na.pass)
final.data$donGuess <- ifelse(final.data$donGuess < 0, 0, final.data$donGuess)
#get expected value of each person's donation
final.data$expDon <- final.data$prob * final.data$donGuess
sum.don <- summary(final.data$expDon)
#Select 1000 donors from the test set who have the highest E(TARGDOL). These may be the donors
#that will be special marketing targets. Then find their total actual donations. This is the payoff
#and should be as high as possible.
top1000 <- final.data[order(final.data$expDon, decreasing=T),][1:1000,]
tot.don <- sum(top1000$targdol)
return(tot.don)
}
logmodelnames = c("logModel", "logModel.quad","backwards","backwards.quad", "logModel2")
logmodels = list(logModel, logModel.quad, backwards, backwards.quad, logModel2)
lmmodelnames = c("lmModel", "lmModel.quad", "backwards.lm.quad", "backwards.lm", "lmModel.inter")
lmmodels = list(lmModel, lmModel.quad, backwards.lm.quad, backwards.lm, lmModel.inter)
don.output <- data.frame("","",0,stringsAsFactors=FALSE)
colnames(don.output) <- c("logmodel","lmmodel","exp.don")
for(i in 1:length(logmodelnames)){
for(j in 1:length(lmmodelnames)){
newcol <- c(logmodelnames[i],
lmmodelnames[j],
expected.don(final.log.model = logmodels[[i]],
final.lm.model = lmmodels[[j]]))
don.output <- rbind(don.output,newcol)
}
}
don.output <- don.output[2:nrow(don.output),]
don.output$exp.don <- as.numeric(don.output$exp.don)
# ORDER GREATEST TO LEAST
don.output[order(-don.output$exp.don),]
logModelInter <- glm(donated ~ . -targdol, data = donTRAINING2, family=binomial)
sum.mod2 <- summary(logModelInter)
num.pred2 <- nrow(sum.mod2$coefficients)
auc(model=logModelInter, testdata=donTEST2, testresponse = donTEST2$donated) # 0.7939676
ccr(model=logModelInter, testdata=donTEST2, testresponse = donTEST2$donated) # 0.7392989
logmodelnames = c("logModel", "logModel.quad","backwards","backwards.quad", "logModelInter")
logmodels = list(logModel, logModel.quad, backwards, backwards.quad, logModelInter)
lmmodelnames = c("lmModel", "lmModel.quad", "backwards.lm.quad", "backwards.lm", "lmModel.inter")
lmmodels = list(lmModel, lmModel.quad, backwards.lm.quad, backwards.lm, lmModel.inter)
don.output <- data.frame("","",0,stringsAsFactors=FALSE)
colnames(don.output) <- c("logmodel","lmmodel","exp.don")
for(i in 1:length(logmodelnames)){
for(j in 1:length(lmmodelnames)){
newcol <- c(logmodelnames[i],
lmmodelnames[j],
expected.don(final.log.model = logmodels[[i]],
final.lm.model = lmmodels[[j]]))
don.output <- rbind(don.output,newcol)
}
}
don.output <- don.output[2:nrow(don.output),]
don.output$exp.don <- as.numeric(don.output$exp.don)
# ORDER GREATEST TO LEAST
don.output[order(-don.output$exp.don),]
summary(backwards)
backwards$formula
forwards$formula
backwards.quad$formula
backwards.lm$model
backwards.lm$terms
sum.back.lm = summary(backwards.lm)
sum.back.lm
sum.mod.lm.quad
sum.back.lm.quad
