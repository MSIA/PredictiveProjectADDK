install.packages("Fselector")
install.packages("FSelector")
library(FSelector)
library(FSelector)
library(rJava)
install.packages('rJava')
library(FSelector)
library(rJava)
version
Sys.getenv("R_ARCH")
library(rJava)
library(rJava)
library(FSelector)
library(ROCR)
library(pROC)
#install.packages('ROCR')
library(ROCR)
library(pROC)
who = "dylan"
# Set appropriate file address
if(who=="kristin"){
address <- '/Users/kmeier92/Documents/Northwestern/fall2016/Predictive_Analytics/PredictiveProjectADDK/'
}
if(who=="adit"){
address <- ''
}
if(who=="dylan"){
address <- 'C:/Users/Dylan/Documents/Northwestern/Predictive Analytics I/PROJECT/'
}
if(who=="dustin"){
address <- 'C:/Users/Dustin/Documents/Northwestern/Predictive Analytics 1/PredictiveProjectADDK/'
}
setwd(address)
# source R code that cleans the data as needed
source(paste(address,'R/cleandata.R',sep=""))
# functions auc & ccr
source(paste(address,'R/helper.R',sep=""))
# call function to create the 2 datasets
thedata <- cleandata(dropNA=T)
donTRAINING_orig <- thedata$train
donTEST_orig <- thedata$test
##############################################
# LOGISTIC REGRESSION MODEL
##############################################
# fit basic logistic regression model
# https://www.r-bloggers.com/evaluating-logistic-regression-models/
# Split into TRAINING and TEST sets
# Remove some columns
# "CNDOL1"    "CNTRLIF"   "CONLARG"   "CONTRFST"  "CNCOD1"    "CNCOD2"    "CNCOD3"    "CNDAT1"
# "CNDAT2"    "CNDAT3"    "CNDOL2"    "CNDOL3"    "CNTMLIF"   "SLCOD1"    "SLCOD2"    "SLCOD3"
# "TARGDOL"   "STATCODE"  "SEX"       "CNMON1"    "CNMON2"    "CNMON3"    "CNMONF"    "CNMONL"
# "ID"        "ContType1" "ContType2" "ContType3" "SolType1"  "SolType2"  "SolType3"  "Region"
# "avg"       "avgTime"   "don2"      "don3"      "donated"
# QUAD TERMS
# "sq_CNDOL1"   "sq_CNTRLIF"  "sq_CONLARG"  "sq_CONTRFST" "sq_CNCOD1"   "sq_CNCOD2"   "sq_CNCOD3"   "sq_CNDAT1"
# "sq_CNDAT2"   "sq_CNDAT3"   "sq_CNDOL2"   "sq_CNDOL3"   "sq_CNTMLIF"  "sq_SLCOD1"   "sq_SLCOD2"   "sq_SLCOD3"
# "sq_CNMON1"   "sq_CNMON2"   "sq_CNMON3"   "sq_CNMONF"   "sq_CNMONL"   "sq_avg"      "sq_avgTime"  "sq_don2"
# "sq_don3"
dropcols <- c("STATCODE","TARGDOL","ID","CNDAT2","CNDAT3","CNCOD1","CNCOD2","CNCOD3"," SLCOD1","
SLCOD2","SLCOD3"," CNMON2"," CNMON3"," SolType2"," SolType3","ContType2","ContType3","Region")
# what to do regression on
keepcols <- c("donated", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST", "CNDAT1", "CNDOL2", "
CNDOL3", "CNTMLIF", "SLCOD1", "SLCOD2", "SEX", "CNMON1", "CNMON2", "
CNMON3", "CNMONF", "CNMONL", "ContType1", "SolType1", "SolType2", "
SolType3", "avg", "avgTime", "don2", "don3")
keepcols <- c("donated", "CNDOL1", "CNTRLIF", "CONLARG", "CONTRFST", "CNDAT1", "CNDOL2", "
CNDOL3", "CNTMLIF", "SLCOD1", "SLCOD2", "SEX", "CNMON1", "CNMON2", "
CNMON3", "CNMONF", "CNMONL", "ContType1", "SolType1", "SolType2", "
SolType3", "avg", "avgTime", "don2", "don3","CNDOL3_don3","CNDOL2_don2")
## you can either have: DATES OF CONTRIBUTION or MONTHS SINCE LATEST CONTRIBUTION
## since all data is using 1 date as current date. these are redundant
donTRAINING <- donTRAINING_orig[,(names(donTRAINING_orig) %in% keepcols)]
donTEST <- donTEST_orig[,(names(donTEST_orig) %in% keepcols)]
### BASICALLY WE WANT TO KEEP TRACK OF THE VARIABLES WE USED
### WH
logModel <- glm(donated ~ . , data = donTRAINING, family=binomial)
sum.mod <- summary(logModel)
num.pred <- nrow(sum.mod$coefficients)
auc(model=logModel)
ccr(model=logModel)
logModel <- glm(donated ~ . , data = donTRAINING, family=binomial)
backwards = step(logModel)
summary(backwards)
auc(model=backwards)
ccr(model=backwards)
nothing <- glm(donated ~ 1, data = donTRAINING, family=binomial)
forwards = step(nothing,
scope=list(lower=formula(nothing),upper=formula(logModel)),
direction="forward")
summary(forwards)
# final
'
donated ~ CNMON2 + CNMONL + CNDAT1 + CNMON3 + ContType1 + CONTRFST +
SolType3 + CNTMLIF + CNMONF + CNDOL1 + CONLARG + SLCOD2 +
CNTRLIF + CNDOL2 + avg + avgTime + SolType1 + SEX
'
auc(model=forwards)
ccr(model=forwards)
weights <- information.gain(donated~., donTRAINING2)
donTRAINING2 <- addSecondDegree(donTRAINING)
donTEST <- addSecondDegree(donTEST)
weights <- information.gain(donated~., donTRAINING2)
View(weights)
subset <- cutoff.k(weights, 2)
f <- as.simple.formula(subset, "Species")
print(f)
subset <- cutoff.k(weights, 50)
f <- as.simple.formula(subset, "donated")
print(f)
logModel3 <- glm(f, data = donTRAINING2, family=binomial)
auc(model=logModel3) #0.7952067
ccr(model=logModel3) #0.7419446
subset <- cutoff.k(weights, 100)
f <- as.simple.formula(subset, "donated")
logModel3 <- glm(f, data = donTRAINING2, family=binomial)
auc(model=logModel3) #0.7952067
ccr(model=logModel3) #0.7419446
subset <- cutoff.k(weights, 500)
f <- as.simple.formula(subset, "donated")
print(f)
logModel3 <- glm(f, data = donTRAINING2, family=binomial)
auc(model=logModel3) #0.7952067
ccr(model=logModel3) #0.7419446
subset <- cutoff.k(weights, 200)
f <- as.simple.formula(subset, "donated")
print(f)
weights <- information.gain(donated~., donTRAINING2)
subset <- cutoff.k(weights, 200)
f <- as.simple.formula(subset, "donated")
logModel4 <- glm(f, data = donTRAINING2, family=binomial)
auc(model=logModel4) #0.7952067
ccr(model=logModel4) #0.7419446
View(donTRAINING_orig)
weights <- information.gain(donated~., donTRAINING_orig)
View(weights)
subset <- cutoff.k(weights, 200)
